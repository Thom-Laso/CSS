
body{/*we can give the background any color that we want,  but i'm giving a fade color*/
    background: linear-gradient(to bottom,rgb( 0,0,0),rgb(26, 26, 26),rgb(59, 59, 59),rgb(89, 89, 89),rgb(122, 122, 122));
    
    /*font-family: "Times New Roman", sans-serif;if times new roman is available use it, if not use sans-serif*/
}
.title{
    color: rgb(12, 253, 4);
    text-align: center;
}

#achievement-title{
    text-align: center;
    font-size: 250%;
    font-weight: bold;
}
h2 {
    color: rgb(12, 253, 4);
    font-weight: 400/*bolding*/;
}
.about_title{
    color: rgb(9, 255, 0);
}
#about_me{
    color: rgb(12, 253, 4);
    font-size: 1cm;
    font-style:  'Tokyo Zoo', sans-serif;
}
#contact_title:hover{
    color: yellow;
}

#gmail:link{
    color: blue;
}
#gmail:visited{
    color:yellow;
}
#ph_no{
    color:rgb(12, 253, 4);
}
.profile_image_wrapper img{
    width: 100%;
}
#profile-image{
    height: 400px;
    width: 30%;
    border: 10px double rgb(6, 255, 6);/*size style color*/ /*style(solid,dotted,dash,double)*/
    padding: 20px;/*adding space inside the border image*/
    margin: 10px;/*adding space outside the image*/
}

.certificate-wrapper{
    color: rgb(12, 253, 4);
    font-size: 0.7cm;
    font-family: 'Fuggles', sans-serif;
}
.certificate-wrapper:hover{
    color: yellow;
}
.certificate-wrapper img{
    width: 500px;;
}
#rajyapuraskar{
    width: 50%;
}
#publicspeaking{
   float: right;
   width: 50%;
   position:relative;
   bottom: -30px;
}
#certCS{
    float: right;
    width: 50%;
    position:relative;
    bottom: -30px;
}
#certIOT{
    width: 50%;
}
#firstaid{
    width: 50%;
 
}

#certCS-title{
    text-align: right;
    position: relative;
    bottom: -30px;
    left: -100px;
}
#publicspeaking-title{
    text-align: right;
    position: relative;
    bottom: -30px;
    left: -400px;
}
#testing1{   /*gradient*/
    height: 400px;
    width: 50%;

    background: linear-gradient(to right,red,green,blue);/*it will move to the top right corner,"to right,to bottom right etc" */
    background-size: cover;
    float: right;

}
#testing2{   /*gradient. there are two types of gradient 1. Linear gradient 2. Radial Gradient*/
    height: 400px;
    width: 50%;

    background: linear-gradient(to bottom,rgb(36, 0, 199),rgb(112, 84, 240),rgb(163, 146, 240),rgb(241, 240, 245));/*it will move to the top right corner,"to right,to bottom right etc" */
    background-size: cover;
    float: right;
}

#testing3{   /*gradient. there are two types of gradient 1. Linear gradient 2. Radial Gradient*/
    height: 400px;
    width: 50%;

    background:radial-gradient(circle, red 10%,blue 20%,green 30%,yellow 40%);/* % is for the size of the colour. it works without size also*/
    /*oval is the default shape, we do not have to specify it, there is circle. */
    float: right;
}
/*Flexbox stands for flexible box
it is a display type that comes with a range of properties 
allowing you to arrange them easily
it is an alternative to using displays, floats, and other layout properties.

Flexbox ios split into two main parts: 1. the container and 2.the items.
The container is the parent element in which the display type is active. this is usually in the form of div.
Flex items are child elements of the container and make up the contents of the box*/

.container{
    background-color:rgb(89, 89, 89);
    margin: 10px;
    display: flex;
   /*flex-direction*/
   flex-wrap: wrap;/*it push the items below is there are no more space*/
   justify-content:center;/*it moves the content to the centre*/
   /*align-items:->will align the items in a container background */;
}

.container-item{
    background-color: rgb(58, 250, 0);
    color: red;
    font-size: 25px;
    text-align: center;

    width: 70px;
    line-height: 50px;
    margin: 10px;
}
.container2{
    background-color:rgb(89, 89, 89);
    margin: 10px;
    display: flex;
    height: 250px;
   /*flex-direction*/
   flex-wrap: wrap;/*it push the items below is there are no more space*/
   justify-content:center;/*it moves the content to the centre*/
   /*align-items:->will align the items in a container background */;
}

.container-item2{
    background-color: rgb(58, 250, 0);
    color: red;
    font-size: 25px;
    text-align: center;

    width: 70px;
    line-height: 50px;
    margin: 10px;
}

/* Grid is a display type that can be used to activate certain layout
features on a container element. Flexbox and Grid are both alternatives to other layout
features available in CSS.
Grid system is more manual, providing us with more tools to layout our container in a
specific way. Grid is also very focus on providing tools for both dimensions (width +
height), where as Flexbox focused on width alone.*/
.grid-container{
    background-color: rgba(161, 161, 161, 0.096);
    margin: 10px;
    height: 250px;
    display: grid;/*once we write this we can activate and use grid properties*/
    
    grid-template-columns: auto auto auto;
    /*grid-template-rows: auto auto auto;*/
    /*justify-content: space-around*/
    /*align-content: space-even*/
    /*grid-row-gap:*/
    /*grid-column-gap:*//*shorthand--->> grid-gap: 3000px 150px*/
}

.grid-item{
    color:black;
    font-size: 25px;
    text-align: center;

    width: 70px;
    line-height: 40px;
    margin: 10px;
}

.submit-button{
    margin: 20px 10px;
    padding: 10px 15px;
    border: none;
    text-decoration: none;
    font-family: "Lato",sans-serif;
    font-weight: 600;
    font-size: 20px;
    color: white;
    background: rgb(16, 248, 28);
    /*transform: ;*/
    -webkit-transition:all 300ms ease-in-out;/*webkit-safari browser*/
    -moz-transition:all 300ms ease-in-out;/*moz-mozilla browser*/
    -o-transition:all 300ms ease-in-out;/*o-opera browser*/
}
.submit-button:hover{
    background: rgb(253, 134, 134);
    padding: 20px 30px;
}

#about-me{
/* animation-name: red-to-black;
 animation-duration: 3s;
 animation-timing-function: linear;
 animation-delay: 1s;
 animation-iteration-count: infinite;
 animation-direction: alternate;  */
 animation: red-to-black 3s linear 1s infinite alternate;/*shorthand for the above animations*/
}
@keyframes red-to-black{
    0%{
        background: red;
        transform: translate(0px, 0px);
    }

    50%{
        background: yellow;
        transform: translate(10px, 10px);
    }

    100%{
        background: black;
        transform: translate(20px,20px);
    }
}

